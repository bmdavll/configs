#!/bin/bash
# host-specific bash functions and environment hacks

## rebuild user bin {{{
function mkbin
{
	local -i code=0
	[ -z "$BIN" ] && return 1
	if [ ! -d "$BIN" ]; then
		mkdir "$BIN" || return $?
	else
		find "$BIN/" -maxdepth 1 -mindepth 1 -type l -delete
	fi
	lnbin ~/code/repos/configs/launchers|| code+=$?
	lnbin ~/code/repos/[^.]*/examples	|| code+=$?
	lnbin ~/code/repos/[^.]*			|| code+=$?
	lnbin ~/code/scripts/local			|| code+=$?
	lnbin ~/code/scripts/python			|| code+=$?
	lnbin ~/code/scripts				|| code+=$?
	lnbin ~/code/bin					|| code+=$?
	return $code
}
## }}}
## source scripts and set environment variables {{{
addsource ~/code/scripts/j.sh
addsource ~/code/repos/[^.]*/*.sh
addsource ~/code/repos/[^.]*/examples/*.sh

CODE_PATH="$HOME/code"
CODE_PATH+=":$HOME/code/scripts:$HOME/code/scripts/perl:$HOME/code/scripts/python"
CODE_PATH+=":$HOME/code/repos:$HOME/code/repos/[^.]*"

alias log='log -i'
alias lg='log -f'
complete -F _log -o filenames lg

alias recipes='lg recipes'
alias birding='lg -e birding'
complete -F _log_alias recipes birding

export LOG_EDITOR='scim-run gvim'

if which surfraw &>/dev/null; then
	export SURFRAW_graphical=no
	export SURFRAW_text_browser=/usr/bin/w3m
fi

cleanup-history.pl &>/dev/null
## }}}
## backups {{{
function b
{
	(cp -a "$(ls -t ~/.mozilla/firefox/*.default/bookmarkbackups/*.json | head -1)" \
			~/.bookmarks
	ls -d ~/arch && ls -R ~/arch >~/tmp/arch.manifest) &>/dev/null
	local TIMEFORMAT=$'\n%2Rs'
	time BACKUP_LOG=~/tmp/backup.log backup "$@"
	local code=$? disks=$(ls -d /media/disk* 2>/dev/null)
	if [ $code -eq 0 -a "$disks" ]; then
		sudo umount /media/disk* && echo -e "Unmounted:\n$disks"
	fi
	return $code
}
## }}}
## completion {{{
# man
type _man &>/dev/null &&
_mancached() {
	local CACHE=~/.mancache
	[ ! -f "$CACHE" ] && return 3
	local cur="$2" sect="${COMP_WORDS[COMP_CWORD-1]}"
	[[ "$sect" != [0-9ln] ]] && sect='.'
	if [ "$cur" -o "$sect" != '.' ]; then
		COMPREPLY=($(compgen -W "$(grep "^$sect $cur" "$CACHE" | cut -d' ' -f2)"))
	else
		COMPREPLY=($(cat "$CACHE" | cut -d' ' -f2))
	fi
} && complete -F _mancached man h
function mancache
{
	if type _mancached &>/dev/null; then
		local CACHE=~/.mancache
		local COMP_WORDS=() COMP_CWORD=2 sect word
		>"$CACHE" || return $?
		for sect in $(seq 0 9) l n; do
			COMP_WORDS=("man" "$sect" "")
			_man &&
			for word in "${COMPREPLY[@]}"; do
				echo "$word"
			done | sort -u | awk '{ print "'"$sect"' "$0 }' >>"$CACHE"
		done
		return 0
	fi
}
## }}}
## pacman {{{
alias pac='pacman'
alias y='yaourt'
complete -F _pacman pac
complete -F _yaourt y

function pacinstall
{
	yaourt -S "$@"
	local code=$?
	if [ $code -eq 0 ]; then
		echo Done
		mancache &>/dev/null
	fi
	return $code
}
alias pacremove='sudo pacman -Rs'
alias pacupdate='yaourt -Syu && sudo clean-pacman-cache.py'

_pacinstall() {
	COMPREPLY=($(compgen -W "$(pacman -Slq)" -- "$2"))
}
_pacremove() {
	COMPREPLY=($(compgen -W "$(pacman -Qq)" -- "$2"))
}
complete -F _pacinstall pacinstall
complete -F _pacremove pacremove

_pacsearch() {
	local results=$(pacman -"$1"s "${@:2}")
	[ -n "$results" ] && echo -e "$( echo "$results" | sed  \
		-e           's#^core/.*#\\033[1;34m&\\033[0;37m#g' \
		-e          's#^extra/.*#\\033[1;32m&\\033[0;37m#g' \
		-e      's#^community/.*#\\033[1;33m&\\033[0;37m#g' \
		-e          's#^local/.*#\\033[1;32m&\\033[0;37m#g' \
		-e 's#^.*/.* [0-9]\+\..*#\\033[1;31m&\\033[0;37m#g' ) \e[0m"
}
alias pacgrep='pacman -Slq | grep'
alias paclgrep='pacman -Qq | grep'
alias pacsearch='_pacsearch S'
alias paclsearch='_pacsearch Q'
alias paclist='pacman -Ql'
alias pacown='pacman -Qo'
## }}}
## git {{{
alias ga='git add'
alias gb='git branch'
alias gc='git commit -a'
alias gco='git checkout'
alias gd='git diff'
alias gl='git log'
alias gls='git ls-files'
alias gm='git merge'
alias gs='git status'
complete -o bashdefault -o default -o nospace -F _git_add		ga
complete -o bashdefault -o default -o nospace -F _git_branch	gb
complete                                      -F _git_commit	gc
complete                                      -F _git_checkout	gco
complete -o bashdefault -o default -o nospace -F _git_diff		gd
complete -o bashdefault -o default -o nospace -F _git_log		gl
complete -o bashdefault -o default -o nospace -F _git_ls_files	gls
complete                                      -F _git_merge		gm
## }}}
## ssh {{{
SSH_ENV="$HOME/.ssh/environment"

function start_agent
{
	echo "Initializing new SSH agent..."
	/usr/bin/ssh-agent | sed 's/^echo/#echo/' >"$SSH_ENV"
	echo "Success"
	chmod 600 "$SSH_ENV"
	source "$SSH_ENV" >/dev/null
	/usr/bin/ssh-add
}

if [ -f "$SSH_ENV" ]; then
	source "$SSH_ENV" >/dev/null
	# ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent$ >/dev/null || start_agent
fi
## }}}
## samba {{{
_smbmount() {
	local IFS=$'\n' SERVER="$1"
	COMPREPLY=$(eval "expr \"\$$SERVER\"")
	if [ ! "$COMPREPLY" ]; then
		COMPREPLY=$( (smbclient -NL "$SERVER" | grep 'Disk *$' |
					  sed -e 's/^\t*//' -e 's/ *Disk *$//') 2>/dev/null)
		eval "$SERVER=\"$COMPREPLY\""
	fi
	COMPREPLY=($(compgen -W "$COMPREPLY" -- "$2"))
}
alias doofie='smbmount doofie'
alias udoofie='smbumount doofie'
complete -F _smbmount -o filenames doofie
## }}}
## wine {{{
function foobar
{
	local paths=("$@")
	gui wine 'C:\users\david\Desktop\foobar2000\foobar2000.exe' "${paths[@]}"
}
function tagrename
{
	gui wine 'C:\Program Files\TagRename\TagRename.exe'
}
## }}}
## misc. aliases {{{
alias tags='ctags --fields=+lS'
alias dash='PS1="\$ " dash'
alias mpdupdate='rm -f ~/.mpd/mpd.db && mpd --create-db >/dev/null'
alias mpdrestart='sudo /etc/rc.d/mpd stop && sudo /etc/rc.d/mpd start'
alias irb='irb --simple-prompt'
alias pd='perldoc'
eval $(complete -p perldoc 2>/dev/null | sed 's/perldoc$/pd/')

alias sl='toilet --gay "CHOOOOooooo  CHOOOOooooo" && sl -a'
alias rename='rename.py -e'
alias xcc='xterm-color-chart.py -n -x 3 -y 2'
alias hot-babe='hot-babe -it 42 -d 200'

# override commands
alias more='less'
alias info='pinfo'
## }}}
## misc. functions {{{
function caps
{
	if [[ "$(xmodmap | grep '0x42')" == control* ]]; then
		xmodmap -e "keycode 0x42 = Caps_Lock" &&
		xmodmap -e "remove Control = Caps_Lock" -e "add Lock = Caps_Lock" &&
		echo "Caps Lock reset"
	else
		xmodmap -e "remove Lock = Caps_Lock" -e "add Control = Caps_Lock" &&
		xmodmap -e "keysym Caps_Lock = Control_L" &&
		echo "Caps Lock is now Control"
	fi
}

function uzbl
{
	[ "$1" = "-f" ] && shift && set -- "file://$@"
	XDG_DATA_HOME="$HOME/.uzbl" XDG_CONFIG_HOME="$HOME/.uzbl" \
	$GUI scim-run uzbl "$@"
}

function comptest
{
	[ -z "$COMP_POINT" ] && return
	[ -z "$2" ] && set -- "$1" '""' "$3"
	echo
	echo "ARGS[$#]:" "$@"
	echo "KEY:$COMP_KEY" "TYPE:$COMP_TYPE"
	echo "WORDBREAKS[${#COMP_WORDBREAKS}]:$COMP_WORDBREAKS"
	var COMP_WORDS
	echo "CWORD:$COMP_CWORD"
	echo "LINE:$COMP_LINE"
	if [ $COMP_POINT -gt 0 ]; then
		echo -n "     "
		local i
		for (( i = 0; i < COMP_POINT; ++i )); do
			echo -n $((i%10))
		done
		echo "^POINT:$COMP_POINT"
	fi
}
complete -F comptest comptest

function cef
{
	cd ~/code && ef scripts/ repos/ "$@" ^/.git/
}

function reorder-here
{
	local IFS=$'\n'
	find . -maxdepth 1 -mindepth 1 -type f -iregex '.*/[0-9]+[^/]*\.\(jpg\|png\|gif\)' \
	| cut -c 3- | sort -n | xargs renumb.py -zl "$@"
}

function mp3collect
{
	[ $# -eq 0 ] && return 1
	local dir
	for dir in "$@"; do
		delete-incomplete-mp3 "$dir" &&
		findf "$dir" -iname "*.mp3" -exec mv -it "$HOME/arch/unsorted" {} + &&
		if [ -d "$dir" ]; then
			findf "$dir" -regextype 'posix-egrep' -iregex '.*\.(m3u|log|cue|nfo|sfv)' -delete &&
			rmed  "$dir"
		fi
	done
}
## }}}
## class {{{
# cs162
# export ARCHDIR=~/class/cs162/mips-x86.linux-xgcc

# cs164
CS164=~/class/cs164/proj/proj2
addpath "$CS164"
TESTSET=correct
TESTFILE=output.ast
function crun
{
	[ "$1" ] &&
	apyc --phase=1 -dp -o $CS164/$TESTFILE $CS164/tests/$TESTSET/$1 &&
	cat $CS164/$TESTFILE
}
function cin
{
	[ "$1" ] && cat $CS164/tests/$TESTSET/$1
}
function clex
{
	[ "$1" ] &&
	${CS164}-lex/apyc --phase=1 -o $CS164/$TESTFILE $CS164/tests/$TESTSET/$1 &&
	cat $CS164/$TESTFILE
}
_crun() {
	local IFS=$'\n'
	COMPREPLY=$( (cd "$CS164/tests/$TESTSET" && ls -d $2*) 2>/dev/null)
	COMPREPLY=($COMPREPLY)
}
complete -F _crun crun cin clex
function ccheck
{
	local file
	for file in $CS164/tests/$TESTSET/*.py; do
		echo "======== $(basename $file) ========"
		python "$file"
		echo
	done
}
function cswap
{
	if [ "$TESTSET" = "correct" ]; then
		TESTSET=error
		echo error
	elif [ "$TESTSET" = "error" ]; then
		TESTSET=correct
		echo correct
	fi
}
function cup
{
	$CS164/pyunparse $CS164/$TESTFILE
}
## }}}

# vim:set ts=4 sw=4 noet fdm=marker:
