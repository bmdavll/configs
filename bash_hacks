#!/bin/bash
# host-specific bash functions and environment hacks
#{{1 rebuild user bin
function mkbin
{
	local -i code=0
	[ -z "$BIN" ] && return 1
	if [ ! -d "$BIN" ]; then
		mkdir "$BIN" || return $?
	else
		find "$BIN/" -maxdepth 1 -mindepth 1 -type l -delete
	fi
	lnbin ~/code/bin					||code+=$?
	lnbin ~/code/configs/launchers		||code+=$?
	lnbin ~/code/repos/[^.]*			||code+=$?
	lnbin ~/code/repos/[^.]*/examples	||code+=$?
	lnbin ~/code/scripts				||code+=$?
	lnbin ~/code/scripts/local			||code+=$?
	lnbin ~/code/scripts/{perl,python}	||code+=$?
	return $code
}

#{{1 source scripts and set environment variables
addsource ~/code/repos/[^.]*/*.sh
addsource ~/code/repos/[^.]*/examples/*.sh
addsource ~/code/scripts/z.sh

CODE_PATH="$HOME/code:$HOME/code/lang"
CODE_PATH+=":$HOME/code/configs"
CODE_PATH+=":$HOME/code/repos:$HOME/code/repos/[^.]*"
CODE_PATH+=":$HOME/code/scripts:$HOME/code/scripts/@(perl|python)"

alias log='log -i'

alias list='log -wn list'
alias clip='log clip'
alias recipes='log recipes'
alias birding='log -wfe birding'

unalias todo
function todo
{
	if [ $# -eq 0 ]; then
		log todo -wn p | perl -e '$_ = join("", <>); s/^3â€”.*//ms; print'
	else
		log todo -w "$@"
	fi
}

complete -F _log_alias list clip todo \
	recipes birding

export LOG_EDITOR='scim-run gvim'
export BACKUP_LOG=~/etc/backup.log
export DROPBOX_DIR=~/etc/Dropbox

#{{1 maintenance
function my-cron
{
	cleanup-history.pl --squash
	cp -au ~/.bash_history "$DROPBOX_DIR"/Public

	ls -R ~/tmp					>~/etc/tmp.manifest
	ls -R ~/music/{new,podcasts}>~/etc/music.manifest

	log "$BACKUP_LOG" k -10
}

#{{1 backups
function b
{
	my-cron &>/dev/null
	if psgrep dropbox &>/dev/null; then
		echo >&2 "Is dropbox running?"
		return
	else
		rm -rf "$DROPBOX_DIR"/.dropbox.cache/*
	fi
	if [ -b /dev/sdb1 ] && ! mount | grep '/dev/sdb1\|/media/disk' &>/dev/null
	then
		sudo mount /dev/sdb1 /media/disk
	fi
	local TIMEFORMAT=$'\n%2Rs'
	time backup "$@"
	local code=$? disks=$(ls -d /media/disk* 2>/dev/null)
	if [ $code -eq 0 ]; then
		$GUI dropboxd
		if [ -n "$disks" ]; then
			sudo umount /media/disk* && echo -e "Unmounted:\n$disks"
		fi
	fi
	return $code
}

#{{1 completion
complete -A directory t

# man
type _man &>/dev/null &&
_mancached() {
	local CACHE=~/.mancache
	[ ! -f "$CACHE" ] && return 2
	local cur="$2" sect="${COMP_WORDS[COMP_CWORD-1]}"
	[[ "$sect" != [0-9ln] ]] && sect='.'
	if [ "$cur" -o "$sect" != '.' ]; then
		COMPREPLY=($(compgen -W "$(grep "^$sect $cur" "$CACHE" | cut -d' ' -f2)"))
	else
		COMPREPLY=($(cat "$CACHE" | cut -d' ' -f2))
	fi
} && complete -F _mancached man h
function mancache
{
	if type _mancached &>/dev/null; then
		local CACHE=~/.mancache
		local COMP_WORDS=() COMP_CWORD=2 sect word
		>"$CACHE" || return $?
		for sect in $(seq 0 9) l n; do
			COMP_WORDS=("man" "$sect" "")
			_man &&
			for word in "${COMPREPLY[@]}"; do
				echo "$word"
			done | sort -u | awk '{ print "'"$sect"' "$0 }' >>"$CACHE"
		done
		return 0
	fi
}

#{{1 pacman
[ -x /usr/bin/pac ] && complete -F _pacman pac

function pacinstall
{
	! pat_in '^[^-]' "$@" && return 1
	sudo clyde -S --needed "$@"
	local code=$?
	if [ $code -eq 0 ]; then
		echo Done
		mancache &>/dev/null
	fi
	return $code
}
alias pacremove='sudo pacman -Rs'

function pacupdate
{
	sudo clyde -Syu \
		--ignore kernel26 \
		--ignore kernel26-headers \
		--ignore xorg-server-common \
		--ignoregroup xorg \
		"$@" &&
	sudo pacman-cache-cleanup.py 2
}
_pacsearch() {
	local results=$(pacman -"$1"s "${@:2}")
	[ -n "$results" ] && echo -e "$( echo "$results" | sed  \
		-e           's#^core/.*#\\033[1;34m&\\033[0;37m#g' \
		-e          's#^extra/.*#\\033[1;32m&\\033[0;37m#g' \
		-e      's#^community/.*#\\033[1;33m&\\033[0;37m#g' \
		-e          's#^local/.*#\\033[1;32m&\\033[0;37m#g' \
		-e 's#^.*/.* [0-9]\+\..*#\\033[1;31m&\\033[0;37m#g' ) \e[0m"
}
alias pacgrep='pacman -Sl | sed "s/^[^ ]* //" | grep'
alias paclgrep='pacman -Q | grep'
alias pacsearch='_pacsearch S'
alias paclsearch='_pacsearch Q'
alias paclist='pacman -Ql'
alias pacown='pacman -Qo'

_pac_repos() {
	COMPREPLY=($(compgen -W "$(pacman -Slq)" -- "$2"))
}
_pac_local() {
	COMPREPLY=($(compgen -W "$(pacman -Qq)" -- "$2"))
}
complete -F _pac_repos pacinstall pacgrep pacsearch
complete -F _pac_local pacremove paclgrep paclsearch paclist

#{{1 git
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gco='git checkout'
alias gd='git diff'
alias gl='git log'
alias gls='git ls-files'
alias gm='git merge'
complete -o bashdefault -o default -o nospace -F _git_add		ga
complete -o bashdefault -o default -o nospace -F _git_branch	gb
complete                                      -F _git_commit	gc
complete                                      -F _git_checkout	gco
complete -o bashdefault -o default -o nospace -F _git_diff		gd
complete -o bashdefault -o default -o nospace -F _git_log		gl
complete -o bashdefault -o default -o nospace -F _git_ls_files	gls
complete                                      -F _git_merge		gm

#{{1 samba
_smbmount() {
	local IFS=$'\n' SERVER="$1"
	COMPREPLY=$(eval "expr \"\$$SERVER\"")
	if [ ! "$COMPREPLY" ]; then
		COMPREPLY=$( (smbclient -NL "$SERVER" | grep 'Disk *$' |
					  sed -e 's/^\t*//' -e 's/ *Disk *$//') 2>/dev/null)
		eval "$SERVER=\"$COMPREPLY\""
	fi
	COMPREPLY=($(compgen -W "$COMPREPLY" -- "$2"))
}
alias doofie='smbmount doofie'
complete -F _smbmount -o filenames doofie

#{{1 misc. aliases
alias ccls='clear && echo -n $(ls ~|wc -l)"	" && ls ~ && cl $DROPBOX_DIR'
alias histop='history | awk "{print \$2}" | sort | uniq -c | sort -nr | head -n'

alias tags='ctags --fields=+lS'
alias irb='irb --simple-prompt'
alias pd='perldoc'
eval $(complete -p perldoc 2>/dev/null | sed 's/perldoc$/pd/')

alias dr='diffr'
alias bak='swap bak ""'
alias rename='rename.py -e'
alias downsize-jpg='downsize-jpg -p'
alias xcc='xterm-color-chart.py -n -x 3 -y 2'

# override commands
alias more='less'
alias info='pinfo'
alias vi='vim'

#{{1 misc. functions
# backup copy
function cbak
{
	local -i code=0
	local file dest
	for file in "$@"; do
		dest="$(echo "$file"|sed 's|/*$||').bak"
		if [ -e "$dest" ]; then
			echo >&2 -n "cp: overwrite \`$dest'? " && read
			[[ "$REPLY" != [Yy]* ]] && continue
			if ! rm -rf "$dest"; then
				code+=1
				continue
			fi
		fi
		echodo cp -a "$file" "$dest" || code+=1
	done
	return $code
}

# ocd and ls
function ol
{
	o "$@" && ls
}
_ol() {
	set -- o "${@:2}"
	COMP_WORDS=(o "${COMP_WORD[@]:2}")
	_o
}
complete -o nospace -o filenames -F _ol ol

# switch capslock functionality
function caps
{
	if [[ "$(xmodmap | grep '0x42')" == control* ]]; then
		xmodmap -e "keycode 0x42 = Caps_Lock" &&
		xmodmap -e "remove Control = Caps_Lock" -e "add Lock = Caps_Lock" &&
		echo "Caps Lock reset"
	else
		xmodmap -e "remove Lock = Caps_Lock" -e "add Control = Caps_Lock" &&
		xmodmap -e "keysym Caps_Lock = Control_L" &&
		echo "Caps Lock is now Control"
	fi
}

# bash completion debugging
function comptest
{
	[ -z "$COMP_POINT" ] && return
	[ -z "$2" ] && set -- "$1" '""' "$3"
	echo
	echo "\$@[$#]:" "$@"
	echo "COMP_KEY:$COMP_KEY" "COMP_TYPE:$COMP_TYPE"
	echo "COMP_WORDBREAKS[${#COMP_WORDBREAKS}]:$COMP_WORDBREAKS"
	var COMP_WORDS
	echo "COMP_CWORD:$COMP_CWORD"
	echo "COMP_LINE:$COMP_LINE"
	if [ $COMP_POINT -gt 0 ]; then
		echo -n "          "
		local i
		for (( i = 0; i < COMP_POINT; ++i )); do
			echo -n $((i%10))
		done
		echo "^COMP_POINT:$COMP_POINT"
	fi
}
complete -F comptest comptest

#}}
# vim:ts=4 sw=4 noet fdm=marker fmr={{,}} fdl=0:
